// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (account_id, balance, currency)
VALUES ($1, $2, $3)
RETURNING account_id, balance, currency, created_at
`

type CreateAccountParams struct {
	AccountID int64  `json:"account_id"`
	Balance   int64  `json:"balance"`
	Currency  string `json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.AccountID, arg.Balance, arg.Currency)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT account_id, balance, currency, created_at FROM accounts
WHERE account_id = $1
LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, accountID int64) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, accountID)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT account_id, balance, currency, created_at FROM accounts
ORDER BY account_id
LIMIT $1
OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.AccountID,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBalance = `-- name: UpdateBalance :one
UPDATE accounts
SET balance = balance + $1
WHERE account_id = $2
RETURNING account_id, balance, currency, created_at
`

type UpdateBalanceParams struct {
	Amount    int64 `json:"amount"`
	AccountID int64 `json:"account_id"`
}

func (q *Queries) UpdateBalance(ctx context.Context, arg UpdateBalanceParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateBalance, arg.Amount, arg.AccountID)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
